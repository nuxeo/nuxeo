<?xml version="1.0" encoding="UTF-8"?>

<facelet-taglib id="nxl" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facelettaglibrary_2_2.xsd"
  version="2.2">
  <description>
    <![CDATA[
    <p>Nuxeo Layout Taglib</p>
    <p>
      Defines tags to display layouts and widgets.
    </p>
    <p>
      Note that some attributes are used to determine what components will be
      part of the jsf component tree, so they have to be resolved early: they
      cannot use variables like iteration variables, coming for instance from a
      ui:repeat or a h:dataTable tag. This is true for layout names, modes and
      widget instances.
    </p>
    ]]>
  </description>
  <namespace>http://nuxeo.org/nxforms/layout</namespace>

  <tag>
    <tag-name>widgetType</tag-name>
    <handler-class>org.nuxeo.ecm.platform.forms.layout.facelets.WidgetTypeTagHandler</handler-class>
    <description>
      <![CDATA[
      <p>
        Facelet tag handler that renders a widget outside of a layout context,
        in a given mode.
      </p>
      <p>
        This is helpful to reuse an existing widget within templates that do not
        need an entire layout to be defined.
      </p>
      <p>
        In addition to the following attributes, any optional attributes are
        accepted and are used as properties of the created widget.
      </p>
      <p>
        When rendered, some variables are exposed to the resolution context:
        <ul>
          <li>
            'value' references the given widget value, so that it can be used in
            a generic template for widgets of type 'template', for instance.
          </li>
          <li>'widget' references the created widget.</li>
          <li>
            widgets of type 'template' also expose field values by 'field_0' or
            'field_1',... the number being the field definition index in the
            field definitions list.
          </li>
        </ul>
      </p>
      Example:
      <pre>
        &lt;nxl:widgetType name="text" mode="#{myMode}" value="#{myText}" required="true" /&gt;
        or
        &lt;nxl:widgetType name="#{myWidgetType}" mode="#{myMode}" value="#{myBoundProperty}"
          properties="#{myProperties}" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>name</name>
      <required>true</required>
      <type>java.lang.String</type>
      <description>
        Name of the widget type that will be used: can be 'text', 'template',...
        or any widget type registered on the pluggable layout system.
      </description>
    </attribute>
    <attribute>
      <name>mode</name>
      <required>true</required>
      <type>java.lang.String</type>
      <description>Mode in which widget must be rendered.</description>
    </attribute>
    <attribute>
      <name>category</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Category of the widget type (optional). Available since 5.7.3, and used in
        conjunction with the 'name' attribute. Defaults implicitly to "jsf"
        when not set for compatibility.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <type>java.lang.Object</type>
      <description>
        The value on which widget will apply. If the "fields" attribute is not
        defined, it has to represent the bound property. Otherwise, it is used
        as a base for fields definitions that will represent the bound
        properties.
      </description>
    </attribute>
    <attribute>
      <name>field</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The field definition on which the widget will apply. Must resolve to a
        FieldDefinition instances, or String item. If fields is also defined,
        this field definitions is added to the list. Available since 5.5.
      </description>
    </attribute>
    <attribute>
      <name>fields</name>
      <required>false</required>
      <type>java.lang.Object</type>
      <description>
        The field definitions on which the widget will apply. Must resolve to a
        list of FieldDefinition instances, or a list of String items.
        Available since 5.4.2.
      </description>
    </attribute>
    <attribute>
      <name>widgetName</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
       The String widget Name. Available since 5.7. If is not present, a name is
       generated instead.
      </description>
    </attribute>
    <attribute>
      <name>properties</name>
      <required>false</required>
      <type>java.util.Map</type>
      <description>
        The widget properties. Must resolve to an instance of Map&lt;String,
        Serializable&gt;. Any other tag attributes are accepted and will be
        added on top of these properties. Available since 5.4.2.
      </description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>The String widget label. Available since 5.4.2.</description>
    </attribute>
    <attribute>
      <name>helpLabel</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The String widget help label. Available since 5.4.2.
      </description>
    </attribute>
    <attribute>
      <name>translated</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        The boolean value stating if the widget labels have to be translated.
        Available since 5.4.2.
      </description>
    </attribute>
    <attribute>
      <name>ignoreTemplateProperty</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean value stating if "template" property should be removed from the
        widget properties. Convenient attribute to avoid stack overflow errors
        when using another widget type in a widget template, for compatibility
        code for instance. Available since 5.6.
      </description>
    </attribute>
    <attribute>
      <name>subWidgets</name>
      <required>false</required>
      <type>org.nuxeo.ecm.platform.forms.layout.api.Widget[]</type>
      <description>
        The array of widgets instances (Widget[]) to add to the created widget.
        Available since 5.6.
      </description>
    </attribute>
    <attribute>
      <name>resolveOnly</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean stating that the widget to render should be resolved and
        exposed in the context, but not displayed. Useful to generate the widget
        instance without rendering it right away. Available since 5.7.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>widget</tag-name>
    <handler-class>org.nuxeo.ecm.platform.forms.layout.facelets.WidgetTagHandler</handler-class>
    <description>
      <![CDATA[
      <p>Facelet tag handler that renders a widget in a given mode.</p>
      <p>
        When rendered, some variables are exposed to the resolution context:
        <ul>
          <li>'value' references the given widget value.</li>
          <li>
            'widget' references the widget. It is also referenced by 'widget_0'
            or 'widget_1',... the number being the widget level in the hierarchy
            of widgets.
          </li>
          <li>
            widgets of type 'template' also expose field values by 'field_0' or
            'field_1',... the number being the field definition index in the
            field definitions list.
          </li>
        </ul>
      </p>
      <p>
        Any additional property set on the tag and that is not explicitely in the
        list of handled attributes is added to the widget properties, overriding
        properties that already set in the widget definition.
      </p>
      Example:
      <pre>
        &lt;nxl:widget widget="#{widget}" value="#{myObject}" /&gt;
        or
        &lt;nxl:widget name="widgetName" category="" mode="#{myMode}" value="#{myObject}" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>widget</name>
      <required>false</required>
      <type>org.nuxeo.ecm.platform.forms.layout.api.Widget</type>
      <description>
        The widget instance. This instance is often exposed by the layout system
        inside of a layout template, but any widget instance created by
        third-party code can be used as long as its type is registered on the
        pluggable layout system. Attributes 'name' and 'definition' are another
        alternative to build a widget when the instance is not already
        created and available: this attribute is required when alternatives
        are not filled.
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Name of the widget as registered on the pluggable layout system.
        Required if the attributes 'widget' and 'definition' are not filled.
        Available since 5.6.
      </description>
    </attribute>
    <attribute>
      <name>category</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Category of the widget (optional). Available since 5.6, and used in
        conjunction with the 'name' attribute. Defaults implicitly to "jsf"
        when not set for compatibility.
      </description>
    </attribute>
    <attribute>
      <name>definition</name>
      <required>false</required>
      <type>org.nuxeo.ecm.platform.forms.layout.api.WidgetDefinition</type>
      <description>
        Widget definition as it would be retrieved from the layout store service.
        This attribute is required if none of the 'widget' or 'name' attributes
        are filled: it makes it possible to render a widget generated
        dynamically. Available since 5.6.
      </description>
    </attribute>
    <attribute>
      <name>mode</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The widget mode. Required if attributes 'name' or 'definition' are used
        so that the widget instance can be generated for given mode. Available
        since 5.6.
      </description>
    </attribute>
    <attribute>
      <name>layoutName</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The layout name. Optional, and only used if attributes 'name' or
        'definition' are used so that the layout name can be set on generated
        widget instance. Available since 5.6.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <type>java.lang.Object</type>
      <description>
        The value on which widget will apply. If the widget holds field
        definitions, they will be resolved based on this value. For instance, if
        value is a document and the widget references the dc:title field,
        standard widgets will apply on the given document property.
      </description>
    </attribute>
    <attribute>
      <name>resolveOnly</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean stating that the widget to render should be resolved and
        exposed in the context, but not displayed. Useful to generate the widget
        instance without rendering it right away. Available since 5.7.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>layout</tag-name>
    <handler-class>org.nuxeo.ecm.platform.forms.layout.facelets.LayoutTagHandler</handler-class>
    <description>
      <![CDATA[
      <p>Facelet tag handler that renders a layout in a given mode.</p>
      <p>
        When rendered, some variables are exposed to the resolution context and
        can be used within the template attached to the layout.
        <ul>
          <li>'layout' references the computed layout.</li>
          <li>
            'value' or 'layoutValue' references the given value, so that it can
            be used in the widget properties definitions, for instance. The
            'value' variable is updated to the value passed to widget tag in a
            widget rendering context.
          </li>
        </ul>
      </p>
      <p>
        Any additional property set on the tag and that is not explicitely in the
        list of handled attributes is added to the layout properties, overriding
        properties that already set in the layout definition.
      </p>
      Example:
      <pre>
        &lt;nxl:layout name="dublincore" mode="#{myMode}" value="#{myObject}" /&gt;
        or
        &lt;nxl:layout definition="#{myLayoutDefinition}" mode="#{myMode}" value="#{myObject}" /&gt;
        or
        &lt;nxl:layout layout="#{myLayoutInstance}" value="#{myObject}" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>name</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Name of the layout as registered on the pluggable layout system.
        Required if the 'layout' or 'definition' attributes are not filled.
        Since 5.6, also accepts a list of layout names, separated by commas.
      </description>
    </attribute>
    <attribute>
      <name>category</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Category of the layout (optional). Available since 5.5, and used in
        conjunction with the 'name' attribute. Defaults implicitly to "jsf"
        when not set for compatibility.
      </description>
    </attribute>
    <attribute>
      <name>definition</name>
      <required>false</required>
      <type>org.nuxeo.ecm.platform.forms.layout.api.LayoutDefinition</type>
      <description>
        Layout definition as it would be retrieved from the layout store
        service. This attribute is required if the layout or name attributes
        are not filled: it makes it possible to render a layout generated
        dynamically. Available since 5.4.2.
      </description>
    </attribute>
    <attribute>
      <name>mode</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Mode in which layout must be rendered. Required only if layout instance
        needs to be built.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <description>The value on which layout will apply.</description>
    </attribute>
    <attribute>
      <name>layout</name>
      <required>false</required>
      <type>org.nuxeo.ecm.platform.forms.layout.api.Layout</type>
      <description>Layout instance to rendered.
        This attribute is required if none of the 'definition' or 'name'
        attributes are filled: it makes it possible to render a layout generated
        dynamically or already in the context. Available since 5.7.
      </description>
    </attribute>
    <attribute>
      <name>template</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The template to use for this layout, overriding the template declared in
        the layout definition.
      </description>
    </attribute>
    <attribute>
      <name>selectedRows</name>
      <required>false</required>
      <type>java.util.List</type>
      <description>
        String list of row names that are selected. If not null, the layout rows
        will be filtered according to this list. If null, only the rows marked
        as selected by default will be taken into account, unless attribute
        selectAllByDefault is set to true. Defaults to null. Is available since
        version 5.4.
      </description>
    </attribute>
    <attribute>
      <name>selectedColumns</name>
      <required>false</required>
      <type>java.util.List</type>
      <description>Alias of selectedRows attribute.</description>
    </attribute>
    <attribute>
      <name>selectAllByDefault</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean indicating if all rows should be considered selected by default.
        Will have an impact only if attribute selectedRows or alias
        selectedColumns resolve to a null value. Defaults to false. Is available
        since version 5.4.
      </description>
    </attribute>
    <attribute>
      <name>resolveOnly</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean stating that the layout to render should be resolved and
        exposed in the context, but not displayed. Useful to generate the layout
        instance without rendering it right away. Available since 5.7.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>layoutRow</tag-name>
    <handler-class>org.nuxeo.ecm.platform.forms.layout.facelets.LayoutRowTagHandler</handler-class>
    <description>
      <![CDATA[
      <p>
        Facelet tag handler that iterates over layout rows in a layout template.
      </p>
      <p>
        When rendered, some variables are exposed to the resolution context and
        can be used inside the tag:
        <ul>
          <li>
            'layoutRow' and since 5.3.1, alias 'layoutColumn' reference the
            current layout row or column.
          </li>
          <li>
            'layoutRowIndex' and since 5.3.1, alias 'layoutColumnIndex' reference
            its index in the layout list of rows/columns.
          </li>
        </ul>
      </p>
      Example:
      <pre>
        &lt;table class="dataInput"&gt;
          &lt;tbody&gt;
            &lt;nxl:layoutRow&gt;
              &lt;tr&gt;
                &lt;nxl:layoutRowWidget&gt;
                  &lt;td class="labelColumn"&gt;
                    &lt;h:outputText value="#{widget.label}"
                      rendered="#{!widget.translated}" /&gt;
                    &lt;h:outputText value="#{messages[widget.label]}"
                      rendered="#{widget.translated}" /&gt;
                  &lt;/td&gt;
                  &lt;td class="fieldColumn"&gt;
                    &lt;nxl:widget widget="#{widget}" mode="#{widget.mode}"
                      value="#{value}" /&gt;
                  &lt;/td&gt;
                &lt;/nxl:layoutRowWidget&gt;
              &lt;/tr&gt;
            &lt;/nxl:layoutRow&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      </pre>
      ]]>
    </description>
  </tag>

  <tag>
    <tag-name>layoutColumn</tag-name>
    <handler-class>org.nuxeo.ecm.platform.forms.layout.facelets.LayoutColumnTagHandler</handler-class>
    <description>
      Facelet tag handler equivalent to the layoutRow tag, available since 5.3.1.
    </description>
  </tag>

  <tag>
    <tag-name>layoutRowWidget</tag-name>
    <handler-class>org.nuxeo.ecm.platform.forms.layout.facelets.LayoutRowWidgetTagHandler</handler-class>
    <description>
      <![CDATA[
      <p>
        Facelet tag handler that iterates over widgets in a layoutRow tag, in a
        layout template.
      </p>
      <p>
        When rendered, some variables are exposed to the resolution context and
        can be used inside the tag:
        <ul>
          <li>
            'widget' or 'widget_0' references the current widget, 0 being its
            level in the widgets hierarchy.
          </li>
          <li>
            'widgetIndex' references its index in the layout row list of
            widgets.
          </li>
        </ul>
      </p>
      Example:
      <pre>
        &lt;table class="dataInput"&gt;
          &lt;tbody&gt;
            &lt;nxl:layoutRow&gt;
              &lt;tr&gt;
                &lt;nxl:layoutRowWidget&gt;
                  &lt;td class="labelColumn"&gt;
                    &lt;h:outputText value="#{widget.label}"
                      rendered="#{!widget.translated}" /&gt;
                    &lt;h:outputText value="#{messages[widget.label]}"
                      rendered="#{widget.translated}" /&gt;
                  &lt;/td&gt;
                  &lt;td class="fieldColumn"&gt;
                    &lt;nxl:widget widget="#{widget}" mode="#{widget.mode}"
                      value="#{value}" /&gt;
                  &lt;/td&gt;
                &lt;/nxl:layoutRowWidget&gt;
              &lt;/tr&gt;
            &lt;/nxl:layoutRow&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      </pre>
      ]]>
    </description>
  </tag>

  <tag>
    <tag-name>layoutColumnWidget</tag-name>
    <handler-class>org.nuxeo.ecm.platform.forms.layout.facelets.LayoutColumnWidgetTagHandler</handler-class>
    <description>
      Facelet tag handler equivalent to the layoutRowWidget tag, available since 5.3.1.
    </description>
  </tag>

  <tag>
    <tag-name>subWidget</tag-name>
    <handler-class>org.nuxeo.ecm.platform.forms.layout.facelets.SubWidgetTagHandler</handler-class>
    <description>
      <![CDATA[
      <p>
        Facelet tag handler that iterates over sub widgets in a template
        attached to the widget of type 'template'.
      </p>
      <p>
        When rendered, some variables are exposed to the resolution context and
        can be used inside the tag:
        <ul>
          <li>
            'widget' or 'widget_n' references the current widget, n being its
            level in the widgets hierarchy. For instance, the root of all
            widgets is always referenced as 'widget_0', while 'widget' is
            updated to the current sub widget value.
          </li>
          <li>
            'widgetIndex' or 'widgetIndex_n' references its index in the layout
            row list of widgets or in the widget list of sub widgets. It is
            *not* the sub widget iteration number when iterating over a list of
            objects.
          </li>
        </ul>
      </p>
      Example:
      <pre>
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;nxu:inputList value="#{field_0}" id="#{widget.id}_table" model="model"
              rendered="#{not empty field_0}"&gt;
              &lt;nxl:subWidget&gt;
                &lt;tr&gt;
                  &lt;td class="labelColumn"&gt;
                    &lt;h:outputText value="#{messages[widget.label]}" styleClass="labelColumn" /&gt;
                  &lt;/td&gt;
                  &lt;td class="fieldColumn"&gt;
                    &lt;nxl:widget widget="#{widget}" mode="#{widget.mode}" value="#{model.rowData}" /&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
              &lt;/nxl:subWidget&gt;
            &lt;/nxu:inputList&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      </pre>
      ]]>
    </description>
  </tag>

  <tag>
    <tag-name>documentLayout</tag-name>
    <handler-class>org.nuxeo.ecm.platform.forms.layout.facelets.DocumentLayoutTagHandler</handler-class>
    <description>
      <![CDATA[
      <p>
        Facelet tag handler that renders all layouts attached to a document in a
        given mode.
      </p>
      <p>
        Layouts are built using the document type definition. This tag is
        equivalent to rendering each layout in given mode, using document as
        value.
      </p>
      <p>
        Any additional property set on the tag and that is not explicitely in the
        list of handled attributes is added to each of the layouts properties,
        overriding properties that already set in the layout definitions.
      </p>
      Example:
      <pre>
        &lt;nxl:documentLayout mode="#{myMode}" value="#{myDocument}" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>mode</name>
      <required>true</required>
      <type>java.lang.String</type>
      <description>
        Mode in which layouts must be taken on the document definition, as well
        as rendered if attribute "documentMode" is not defined.
      </description>
    </attribute>
    <attribute>
      <name>documentMode</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Mode in which layouts must be taken on the document definition, if
        defined (otherwise, will use the "mode" attribute value).
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <type>org.nuxeo.ecm.core.api.DocumentModel</type>
      <description>
        The document for which layouts will be built and rendered.
      </description>
    </attribute>
    <attribute>
      <name>template</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The template to use for layouts, overriding each of the templates
        declared in the layouts definitions.
      </description>
    </attribute>
    <attribute>
      <name>defaultLayout</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The default layout to be rendered if no layout is found on the document
        definition. Available since 5.4.2.
      </description>
    </attribute>
    <attribute>
      <name>includeAnyMode</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean indicating if layouts declared in the 'any' mode on the document
        definition should be used if no layout is found for the wanted mode.
        Defaults to true. Available since 5.4.2.
      </description>
    </attribute>
  </tag>

  <function>
    <function-name>widgetTypeDefinition</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.facelets.library.LayoutTagLibrary</function-class>
    <function-signature>
      org.nuxeo.ecm.platform.forms.layout.api.WidgetTypeDefinition
      getWidgetTypeDefinition(java.lang.String)
    </function-signature>
    <description>
      Returns the widget type definition for given widget type id. Available since 5.4.0.
    </description>
  </function>

  <function>
    <function-name>fieldDefinitionsAsString</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.facelets.library.LayoutTagLibrary</function-class>
    <function-signature>java.lang.String
      getFieldDefinitionsAsString(org.nuxeo.ecm.platform.forms.layout.api.FieldDefinition[])
    </function-signature>
    <description>
      Returns the list of property names for each of the field definitions, separated by a space.
    </description>
  </function>

  <function>
    <function-name>selectedRows</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.facelets.library.LayoutTagLibrary</function-class>
    <function-signature>java.util.List
      getSelectedRows(org.nuxeo.ecm.platform.forms.layout.api.Layout,
      java.util.List, boolean)
    </function-signature>
    <description>
      Returns the list of LayoutRow instances that are selected given the Layout
      instance, the list of row names selected, and a boolean that, if set to true,
      will include rows that are marked as always selected.
    </description>
  </function>

  <function>
    <function-name>selectedColumns</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.facelets.library.LayoutTagLibrary</function-class>
    <function-signature>java.util.List
      getSelectedRows(org.nuxeo.ecm.platform.forms.layout.api.Layout,
      java.util.List, boolean)
    </function-signature>
    <description>
      Alias to the nxl:selectRows function.
    </description>
  </function>

  <function>
    <function-name>notSelectedRows</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.facelets.library.LayoutTagLibrary</function-class>
    <function-signature>java.util.List
      getSelectedRows(org.nuxeo.ecm.platform.forms.layout.api.Layout,
      java.util.List, boolean)
    </function-signature>
    <function-signature>java.util.List
      getNotSelectedRows(org.nuxeo.ecm.platform.forms.layout.api.Layout,
      java.util.List)
    </function-signature>
    <description>
      Returns the list of LayoutRow instances that are not selected given the
      Layout instance and the list of row names selected.
    </description>
  </function>

  <function>
    <function-name>notSelectedColumns</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.facelets.library.LayoutTagLibrary</function-class>
    <function-signature>java.util.List
      getNotSelectedRows(org.nuxeo.ecm.platform.forms.layout.api.Layout,
      java.util.List)
    </function-signature>
    <description>
      Alias to the nxl:notSelectedRows function.
    </description>
  </function>

  <function>
    <function-name>defaultSelectedRowNames</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.facelets.library.LayoutTagLibrary</function-class>
    <function-signature>java.util.List
      getDefaultSelectedRowNames(org.nuxeo.ecm.platform.forms.layout.api.Layout,
      boolean)</function-signature>
    <description>
      Returns the list of row names that are marked as selected by default given
      the Layout instance and a boolean that, if set to true, will include rows
      that are marked as always selected.
    </description>
  </function>

  <function>
    <function-name>defaultSelectedColumnNames</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.facelets.library.LayoutTagLibrary</function-class>
    <function-signature>java.util.List
      getDefaultSelectedRowNames(org.nuxeo.ecm.platform.forms.layout.api.Layout,
      boolean)</function-signature>
    <description>
      Alias to the nxl:defaultSelectedRowNames function.
    </description>
  </function>

  <function>
    <function-name>isBoundToEditMode</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.api.BuiltinModes</function-class>
    <function-signature>boolean isBoundToEditMode(java.lang.String)</function-signature>
    <description>
      Returns true if given layout mode should be mapped to the 'edit' mode for
      widgets in the layout. Available since 5.4.0.
    </description>
  </function>

  <function>
    <function-name>isLikePlainMode</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.api.BuiltinWidgetModes</function-class>
    <function-signature>boolean isLikePlainMode(java.lang.String)</function-signature>
    <description>
      Returns true if given widget mode should be considered as 'plain', for
      instance when rendering values for CSV export. Available since 5.4.2.
    </description>
  </function>

  <function>
    <function-name>isLikeViewMode</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.api.BuiltinWidgetModes</function-class>
    <function-signature>boolean isLikeViewMode(java.lang.String)</function-signature>
    <description>
      Returns true if given widget mode should be considered as 'view' (old
      default mode), e.g. non-null mode, and none of edit, pdf, plain modes.
      Available since 5.4.2
    </description>
  </function>

  <function>
    <function-name>getWidgetModeFromLayoutMode</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.api.BuiltinModes</function-class>
    <function-signature>java.lang.String
      getWidgetModeFromLayoutMode(java.lang.String)</function-signature>
    <description>
      Returns the resolved widget mode for current layout mode.
      Available since 8.1.
    </description>
  </function>

  <function>
    <function-name>joinReRender</function-name>
    <function-class>org.nuxeo.ecm.platform.forms.layout.facelets.library.LayoutTagLibrary</function-class>
    <function-signature>java.lang.String joinReRender(java.lang.String,
      java.lang.String)</function-signature>
    <description>
      Joins two strings to generate a valid reRender attribute for ajax
      components. Available since 5.7, deprecated since 5.9.5: use
      nxu:joinRender instead.
    </description>
  </function>

</facelet-taglib>