#!/usr/bin/env python
"""
(C) Copyright 2017 Nuxeo (http://nuxeo.com/) and others.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Contributors:
    Florent Guillaume

This script generates an aggregate of the licenses used by the third-party libraries.
The output is stored in file:
- target/generated-sources/license/THIRD-PARTY.md

It needs some files to have been generated by previous maven stages.
Extracted licenses:
- mvn -nsu license:aggregate-add-third-party -Paddons,distrib,release,-qa
  - target/generated-sources/license/THIRD-PARTY.txt
Extracted dependencies:
- mvn -nsu dependency:tree -Paddons,distrib,release,-qa -DoutputFile=${session.executionRootDirectory}/target/generated-sources/dependency-tree.log -DappendOutput=true
  - target/generated-sources/dependency-tree.log

It uses a list of manually-collected unknown licenses available in file:
- scripts/licenses-unknown.txt

It also uses a list of detailed project name + home page for some projects, in file:
- scripts/licenses-descriptions.txt

It also uses a list of group + artifact for projects not found from maven dependencies:
- scripts/dependencies-added.txt

Usage:
$ ./scripts/generate-licenses.py
"""
import os
import re

UNKNOWN = 'licenses-unknown.txt'
DESCRIPTIONS = 'licenses-descriptions.txt'
DEPS_ADDED = 'dependencies-added.txt'
TP = '../target/generated-sources/license/THIRD-PARTY.txt'
TP_MD = '../target/generated-sources/license/THIRD-PARTY.md'
DEPTREE = '../target/generated-sources/dependency-tree.log'

ARTIFACT_GROUP = {}

def chdir_scripts():
    dir = os.path.dirname(os.path.realpath(__file__))
    os.chdir(dir)

def parse_licenses(filename):
    licenses = {}
    versions = {}
    with open(filename) as f:
        for line in f:
            line = line.strip(' \n')
            if line == '':
                continue
            if line.startswith('#'):
                continue
            if line.startswith('Lists of'):
                continue
            # multi-licenses (EPL 1.0 + MPL 2.0) -> (EPL 1.0) (MPL 2.0)
            line = line.replace(' + ', ') (')
            # (AL 1.1) (BSD 4) (Public Domain) MXP1: Xml Pull Parser 3rd Edition (XPP3) (xpp3:xpp3:1.1.4c - http://www.extreme.indiana.edu/xgws/xsoap/xpp/mxp1/)
            m = re.match('((\([^)]+\) )+)(.+) \(([^ :]+):([^ :]+):([^ :]+) - .+\)', line)
            if m is None:
                # print('XXX ' + line)
                continue
            license_list = [l.strip('() ') for l in m.group(1).split(') (')]
            name = m.group(3)
            group = m.group(4)
            artifact = m.group(5)
            version = m.group(6)
            ga = group + ':' + artifact
            if group == 'nuxeo-studio':
                continue
            licenses[ga] = license_list
            versions[ga] = version
            ARTIFACT_GROUP[artifact] = group
            # print('XXX', license_list, name, group, artifact, version)
    return licenses, versions

def fix_unknown(licenses, add_licenses, versions, add_versions):
    for ga, license_list in licenses.iteritems():
        if license_list == ['Unknown license']:
            if ga in add_licenses:
                licenses[ga] = add_licenses[ga]
            else:
                print('XXX unknown', ga)
    for ga in add_licenses:
        if ga not in licenses:
            licenses[ga] = add_licenses[ga]
            versions[ga] = add_versions[ga]

def read_descriptions():
    descriptions = {}
    with open(DESCRIPTIONS) as f:
        for line in f:
            line = line.strip('\n|')
            if line.startswith('#'):
                continue
            ga, info = line.split('|')
            descriptions[ga] = info
    return descriptions

def read_deps_added():
    gas = set()
    with open(DEPS_ADDED) as f:
        for line in f:
            line = line.strip('\n')
            if line == '':
                continue
            if line.startswith('#'):
                continue
            line = line.strip(' ')
            gas.add(line)
    return gas

def read_deps():
    gas = set()
    is_test = False
    with open(DEPTREE) as f:
        for line in f:
            line = line.strip('\n')
            isroot = re.match('^[a-z].*', line) is not None
            line = line.replace('|  ', '')
            line = line.replace('+- ', '')
            line = line.replace('\\- ', '')
            line = line.strip(' ')
            if line.count(':') == 3:
                # org.nuxeo.common:nuxeo-common:jar:10.1-SNAPSHOT
                group, artifact, packaging, version = line.split(':')
                scope = ''
                classifier = ''
            elif line.count(':') == 4:
                # net.sf.ezmorph:ezmorph:jar:1.0.4:provided
                group, artifact, packaging, version, scope = line.split(':')
                classifier = ''
            elif line.count(':') == 5:
                # net.sf.json-lib:json-lib:2.4:jar:jdk15:compile
                group, artifact, packaging, version, classifier, scope = line.split(':')
            else:
                # print('XXX ' + line)
                continue
            ga = group + ':' + artifact
            if isroot:
                is_test = scope == 'test' or 'test' in ga
            if is_test or packaging != 'jar' or (scope != 'compile' and scope != 'zip'):
                continue
            gas.add(ga)
            # print('XXX dep', ga)
    return gas

def dump(licenses, versions, descriptions, gas, out):
    lines = []
    for ga, license_list in licenses.iteritems():
        group, artifact = ga.split(':')
        version = versions[ga]
        jar = artifact + '-' + version + '.jar'
        info = descriptions.get(ga, ' ')
        if ga in gas:
            gas.remove(ga)
            lines.append('| ' + group + ':' + artifact + ':' + version + ' | ' + jar + ' | ' + info + ' | ' + version + ' | ' + ', '.join(license_list) + ' |')
    for line in sorted(lines, key=str.lower):
        out.write(line + '\n')
    for ga in gas:
        if ga.startswith('org.nuxeo'):
            continue
        if ga.startswith('nuxeo-studio'):
            continue
        print('XXX dependency with no license', ga)


def main():
    chdir_scripts()
    licenses, versions = parse_licenses(TP)
    add_licenses, add_versions = parse_licenses(UNKNOWN)
    fix_unknown(licenses, add_licenses, versions, add_versions)
    descriptions = read_descriptions()
    deps_added = read_deps_added()
    gas = read_deps()
    gas.update(deps_added)
    with open(TP_MD, 'w') as out:
        dump(licenses, versions, descriptions, gas, out)

if __name__ == '__main__':
    main()

