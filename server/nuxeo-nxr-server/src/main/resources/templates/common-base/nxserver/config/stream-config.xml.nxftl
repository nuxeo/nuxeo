<?xml version="1.0"?>
<component name="org.nuxeo.stream.defaultConfig">
  <#if "${confluent.schema_registry.enabled}" == "true">
  <require>org.nuxeo.runtime.codec.service</require>
  <extension target="org.nuxeo.runtime.codec.service" point="codec">
    <codec name="avroConfluent" class="org.nuxeo.runtime.codec.AvroCodecFactory">
      <option name="encoding">confluent</option>
      <option name="schemaRegistryUrls">${confluent.schema_registry.urls}</option>
    </codec>
  </extension>
  </#if>
  <require>org.nuxeo.runtime.stream.service</require>
  <require>org.nuxeo.ecm.core.bulk.config</require>
  <extension target="org.nuxeo.runtime.stream.service" point="logConfig">
  <#if "${kafka.enabled}" == "true">
    <logConfig name="default" type="kafka" default="true">
      <option name="kafkaConfig">default</option>
    </logConfig>
    <logConfig name="bulk" type="kafka">
      <option name="kafkaConfig">bulk</option>
      <log name="bulk/command" size="${nuxeo.core.bulk.scroller.concurrencyMax}" />
      <log name="bulk/status" size="${nuxeo.core.bulk.status.concurrencyMax}" />
      <log name="bulk/done" size="${nuxeo.core.bulk.done.concurrencyMax}" />
      <match name="bulk/" />
    </logConfig>
  <#else>
    <logConfig name="default" type="chronicle" default="true">
      <option name="retention">${nuxeo.stream.chronicle.retention.duration}</option>
    </logConfig>
    <logConfig name="bulk" type="chronicle">
      <option name="retention">${nuxeo.stream.chronicle.retention.duration}</option>
      <log name="bulk/command" size="${nuxeo.core.bulk.scroller.concurrencyMax}" />
      <log name="bulk/status" size="${nuxeo.core.bulk.status.concurrencyMax}" />
      <log name="bulk/done" size="${nuxeo.core.bulk.done.concurrencyMax}" />
      <match name="bulk/" />
    </logConfig>
  </#if>
  </extension>
<#if "${nuxeo.stream.work.enabled}" == "true">
  <require>org.nuxeo.ecm.core.work.service</require>
  <service>
    <provide interface="org.nuxeo.ecm.core.work.api.WorkManager" />
  </service>
  <implementation class="org.nuxeo.ecm.core.work.StreamWorkManager" />
  <extension-point name="queues">
    <object class="org.nuxeo.ecm.core.work.api.WorkQueueDescriptor" />
    <registry class="org.nuxeo.ecm.core.work.api.WorkQueueRegistry" />
  </extension-point>
  <extension target="org.nuxeo.runtime.stream.service" point="logConfig">
  <#if "${kafka.enabled}" == "true">
    <logConfig name="work" type="kafka">
      <option name="kafkaConfig">default</option>
      <match name="work/" />
    </logConfig>
  <#else>
    <logConfig name="work" type="chronicle">
      <option name="retention">${nuxeo.stream.chronicle.retention.duration}</option>
      <match name="work/" />
    </logConfig>
  </#if>
  </extension>
  <#if "${nuxeo.stream.work.computation.filter.enabled}" == "true">
  <extension target="org.nuxeo.runtime.ConfigurationService" point="configuration">
    <property name="nuxeo.stream.work.computation.filter.class">${nuxeo.stream.work.computation.filter.class}</property>
    <property name="nuxeo.stream.work.computation.filter.thresholdSize">${nuxeo.stream.work.computation.filter.thresholdSize}</property>
    <property name="nuxeo.stream.work.computation.filter.storeName">${nuxeo.stream.work.computation.filter.storeName}</property>
    <property name="nuxeo.stream.work.computation.filter.storeTTL">${nuxeo.stream.work.computation.filter.storeTTL}</property>
    <property name="nuxeo.stream.work.computation.filter.storeKeyPrefix">${nuxeo.stream.work.computation.filter.storeKeyPrefix}</property>
  </extension>
  </#if>
</#if>
  <require>org.nuxeo.ecm.platform.audit.service.NXAuditEventsService</require>
<#if "${nuxeo.stream.audit.enabled}" == "true">
  <extension target="org.nuxeo.runtime.stream.service" point="logConfig">
  <#if "${kafka.enabled}" == "true">
     <logConfig name="audit" type="kafka">
       <option name="kafkaConfig">default</option>
       <match name="audit/" />
     </logConfig>
  <#else>
     <logConfig name="audit" type="chronicle">
       <option name="retention">${nuxeo.stream.chronicle.retention.duration}</option>
       <match name="audit/" />
     </logConfig>
  </#if>
  </extension>
<#else>
  <extension target="org.nuxeo.ecm.core.event.EventServiceComponent" point="listener">
    <listener name="auditLoggerListener" async="false"
              class="org.nuxeo.ecm.platform.audit.listener.AuditEventLogger" />
  </extension>
</#if>
<#if "${nuxeo.pubsub.provider}" == "stream">
 <extension target="org.nuxeo.runtime.stream.service" point="logConfig">
  <#if "${kafka.enabled}" == "true">
     <logConfig name="pubsub" type="kafka">
       <option name="kafkaConfig">default</option>
       <log name="pubsub/pubsub" size="1" />
       <match name="pubsub/" />
     </logConfig>
  <#else>
     <logConfig name="pubsub" type="chronicle">
       <option name="retention">4h</option>
       <log name="pubsub/pubsub" size="1" />
       <match name="pubsub/" />
     </logConfig>
  </#if>
  </extension>
  <extension target="org.nuxeo.runtime.pubsub.PubSubService" point="configuration">
    <provider class="org.nuxeo.runtime.pubsub.StreamPubSubProvider">
      <option name="logName">pubsub/pubsub</option>
      <option name="codec">${nuxeo.stream.pubsub.log.codec}</option>
    </provider>
  </extension>
</#if>
</component>
