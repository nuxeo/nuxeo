<?xml version="1.0" encoding="UTF-8"?>

<facelet-taglib id="nxu" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facelettaglibrary_2_2.xsd"
  version="2.2">
  <description>
    <![CDATA[
    <p>Nuxeo Util Taglib</p>
    <p>
      Defines miscellaneous tags and functions for the Nuxeo JSF application.
    </p>
    ]]>
  </description>

  <namespace>http://nuxeo.org/nxweb/util</namespace>

  <function>
    <function-name>test</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.Object test(java.lang.Boolean,
      java.lang.Object,
      java.lang.Object)
    </function-signature>
    <description>Alternative to the Java unary operator.</description>
  </function>

  <function>
    <function-name>join</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String join(java.lang.String[],
      java.lang.String)
    </function-signature>
    <description>
      Helper function to join an array of String elements with given delimiter.
    </description>
  </function>

  <function>
    <function-name>joinCollection</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String joinCollection(java.util.Collection,
      java.lang.String)
    </function-signature>
    <description>
      Helper function to join a collection of String elements with given delimiter.
    </description>
  </function>

  <function>
    <function-name>joinCollectionWithFinalDelimiter</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String
      joinCollectionWithFinalDelimiter(java.util.Collection,
      java.lang.String,
      java.lang.String)
    </function-signature>
    <description>
      Helper function to join a collection of String elements with given
      delimiter, and given final delimiter.
    </description>
  </function>

  <function>
    <function-name>joinArrayWithFinalDelimiter</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String
      joinArrayWithFinalDelimiter(java.lang.Object[],
      java.lang.String,
      java.lang.String)
    </function-signature>
    <description>
      Helper function to join an array of String elements with given
      delimiter, and given final delimiter.
    </description>
  </function>

  <function>
    <function-name>combineLists</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>String combineLists(java.util.List[])</function-signature>
    <description>
      Returns an aggregate list with the elements all the lists passed as
      arguments, preserving the global ordering.
    </description>
  </function>

  <function>
    <function-name>concat</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String concat(java.lang.String,
      java.lang.String)
    </function-signature>
    <description>
      Helper function to concatenate the two given strings.
    </description>
  </function>

  <function>
    <function-name>indentString</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String indentString(java.lang.Integer,
      java.lang.String)
    </function-signature>
    <description>
      Returns a String with given String appended as many times as given integer.
    </description>
  </function>

  <function>
    <function-name>htmlEscape</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String htmlEscape(java.lang.String)</function-signature>
    <description>
      Returns an HTML escaped string (can be use to use h:outputText tags safely in scripts).
    </description>
  </function>

  <function>
    <function-name>javaScriptEscape</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String javaScriptEscape(java.lang.String)</function-signature>
    <description>
      Returns an escaped string for use in JavaScript code (escapes single quote characters for instance).
    </description>
  </function>

  <function>
    <function-name>translate</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String translate(java.lang.String,
      java.lang.Object[])
    </function-signature>
    <description>
      <![CDATA[
      <p>
        Returns a translated message with optional given parameters, to be used
        when formatting the message value.
      </p>
      <p>
        Equivalent to using the h:outputFormat tag, with f:param subtags as
        parameters.
      </p>
      ]]>
    </description>
  </function>

  <function>
    <function-name>hasMessages</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>boolean hasMessages(java.lang.String)</function-signature>
    <description>
      Returns true if faces context has messages for client ids starting with
      given string (if not null). If given String is null, returns true if
      there are any kind of messages.
    </description>
  </function>

  <function>
    <function-name>jsfTagIdEscape</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String jsfTagIdEscape(java.lang.String)</function-signature>
    <description>
      Returns a valid string to be used as a JSF tag id from the given name.
      Throws an error if given name is empty. Available since 5.7.
    </description>
  </function>

  <function>
    <function-name>joinRender</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String joinRender(java.lang.String,
      java.lang.String)
    </function-signature>
    <description>
      Joins two strings to generate a valid render attribute for ajax
      components using JSF2. Available since 5.9.5.
    </description>
  </function>

  <function>
    <function-name>componentAbsoluteId</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String
      componentAbsoluteId(javax.faces.component.UIComponent, java.lang.String)
    </function-signature>
    <description>
      <![CDATA[
      <p>
        Returns the target component absolute id given an anchor in the tree
        and a local id.
      </p>
      <p>
        <strong>WARNING</strong>: this resolution is costly and can affect
        your page performances.
      </p>
      <p>
        If given targetId parameter contains spaces, consider that several ids
        should be resolved, and split them.
      </p>
      ]]>
    </description>
  </function>

  <function>
    <function-name>printFileSize</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String printFileSize(java.lang.String)</function-signature>
    <description>
      <![CDATA[
      Same as nxu:printFormatedFileSize(size, "SI", true). Since 7.4, the default
      format can be controlled thanks to the JSF configuration property
      <strong>nuxeo.jsf.defaultBytePrefixFormat</strong>.
      ]]>
    </description>
  </function>

  <function>
    <function-name>printFormatedFileSize</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String printFormatedFileSize(java.lang.String,
      java.lang.String,
      java.lang.Boolean)
    </function-signature>
    <description>
      <![CDATA[
        Displays a pretty print of the size of a file, using the format given
        in its short or long form. Available formats are "SI", "IEC" or
        "JEDEC". See <a href="http://en.wikipedia.org/wiki/Byte"
        target="_blank">the Wikipedia article on Byte</a> for more information
        on those formats.
      ]]>
    </description>
  </function>

  <function>
    <function-name>printFormattedDuration</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String
      printFormattedDuration(java.lang.Object, java.util.Map)
    </function-signature>
    <description>
      Displays a pretty print of a raw duration measured in seconds as "1 hr
      23 min" or "31 min 29 sec" or "3 sec" for instance. The given map can
      fill alternative labels for duration names.
    </description>
  </function>

  <function>
    <function-name>fileExtension</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String fileExtension(java.lang.String)</function-signature>
    <description>
      Returns the extension from the given filename. Available since 5.7.
    </description>
  </function>

  <function>
    <function-name>fileBaseName</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String fileBaseName(java.lang.String)</function-signature>
    <description>
      Returns the base name from the given filename. Available since 5.7.
    </description>
  </function>

  <function>
    <function-name>dateFormatter</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String dateFormatter(java.lang.String)</function-signature>
    <description>
      Returns a date format pattern using format given in parameter.
      Accepted values: short, shortWithCentury (since 5.6), medium, long, full.
    </description>
  </function>

  <function>
    <function-name>dateFormater</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String dateFormatter(java.lang.String)</function-signature>
    <description>
      Deprecated since 5.9.1, use nxu:dateFormatter instead.
    </description>
  </function>

  <function>
    <function-name>basicDateFormatter</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String basicDateFormatter()</function-signature>
    <description>
      Returns a date format pattern using the default format "shortWithCentury".
    </description>
  </function>

  <function>
    <function-name>basicDateFormater</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String basicDateFormatter()</function-signature>
    <description>
      Deprecated since 5.9.1, use nxu:basicDateFormatter instead.
    </description>
  </function>

  <function>
    <function-name>formatDateUsingBasicFormatter</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String
      formatDateUsingBasicFormatter(java.util.Date)
    </function-signature>
    <description>
      Returns a formatted string for given date, using the
      nxu:basicDateFormatter function logics.
    </description>
  </function>

  <function>
    <function-name>formatDateUsingFullDateAndTimeFormatter</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String
      formatDateUsingFullDateAndTimeFormatter(java.util.Date)
    </function-signature>
    <description>
      Returns a formatted string for given date, using the
      nxu:dateFormat("full") function logics.
    </description>
  </function>

  <function>
    <function-name>dateAndTimeFormatter</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String dateAndTimeFormatter(java.lang.String)</function-signature>
    <description>
      Returns a date and time format pattern using format given in parameter.
      Accepted values: short, shortWithCentury, medium, long, full.
    </description>
  </function>

  <function>
    <function-name>dateAndTimeFormater</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String dateAndTimeFormatter(java.lang.String)</function-signature>
    <description>
      Deprecated since 5.9.1, use nxu:dateAndTimeFormatter instead.
    </description>
  </function>

  <function>
    <function-name>basicDateAndTimeFormatter</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String basicDateAndTimeFormatter()</function-signature>
    <description>
      Returns a date and time format pattern using the default format
      "shortWithCentury".
    </description>
  </function>

  <function>
    <function-name>basicDateAndTimeFormater</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>java.lang.String basicDateAndTimeFormatter()</function-signature>
    <description>
      Deprecated since 5.9.1, use nxu:basicDateAndTimeFormatter instead.
    </description>
  </function>

  <function>
    <function-name>userIsMemberOf</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>boolean userIsMemberOf(java.lang.String)</function-signature>
    <description>
      Returns true if current user is a member of the given group.
    </description>
  </function>

  <function>
    <function-name>userFullName</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>String userFullName(java.lang.String)</function-signature>
    <description>
      Returns the fullname of a user given its id.
    </description>
  </function>

  <function>
    <function-name>userDisplayName</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>String userDisplayName(java.lang.String,
      java.lang.String,
      java.lang.String)
    </function-signature>
    <description>
      Returns the full name of a user given its id, first name and last name.
    </description>
  </function>

  <function>
    <function-name>userDisplayNameAndEmail</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>String userDisplayNameAndEmail(java.lang.String,
      java.lang.String,
      java.lang.String, java.lang.String)
    </function-signature>
    <description>
      Returns the full name of a user, and its email, given its id, first name,
      last name and email. Available since 5.5.
    </description>
  </function>

  <function>
    <function-name>userUrl</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>String userUrl(java.lang.String, java.lang.String,
      java.lang.String, boolean)
    </function-signature>
    <description>
      Returns the user profile rest URL given the pattern name (usually
      'user'), the user name, the view id (can be null) and a boolean stating
      if a new Seam conversation should be created or not. Available since 5.5.
    </description>
  </function>

  <function>
    <function-name>groupFullName</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>String groupFullName(java.lang.String)</function-signature>
    <description>
      Returns the label of a group given its id. Available since 5.5.
    </description>
  </function>

  <function>
    <function-name>groupDisplayName</function-name>
    <function-class>org.nuxeo.ecm.platform.ui.web.tag.fn.Functions</function-class>
    <function-signature>String groupDisplayName(java.lang.String,
      java.lang.String)
    </function-signature>
    <description>
      Returns the label of a group given its id and label. Available since 5.5.
    </description>
  </function>

  <tag>
    <tag-name>set</tag-name>
    <component>
      <component-type>org.nuxeo.ecm.platform.ui.web.binding.alias.UIAliasHolder</component-type>
      <handler-class>org.nuxeo.ecm.platform.ui.web.tag.handler.SetTagHandler</handler-class>
    </component>
    <description>
      <![CDATA[
      <p>
        Facelet tag handler that exposes an expression as a variable, and makes
        it possible to cache it.
      </p>
      <p>
        This is very close to the c:set tag, but allows caching, and the variable
        is only exposed inside the tag. Note that this tag will not work as
        expected when used with iteration variables inside a standard table, for
        instance.
      </p>
      Example:
      <pre>
        &lt;nxu:set var="actions" value="#{webActions.getActionsList('SUBVIEW_UPPER_LIST')}" cache="true"&gt;
          &lt;nxu:dataList var="action" value="#{actions}"&gt;
            ...
          &lt;/nxu:dataList&gt;
        &lt;/nxu:set&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>var</name>
      <required>true</required>
      <type>java.lang.String</type>
      <description>Name of the variable that will be set.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <type>java.lang.Object</type>
      <description>
        Expression that will be evaluated to set the attribute value.
      </description>
    </attribute>
    <attribute>
      <name>cache</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean. Flag indicating if the expression should be evaluated when
        constructing the JSF tree. If true, it is evaluated only once and not
        called again when resolving other expressions using the result variable.
        However, the tag will not work as expected when using request variables
        in its expression (like table variable). Set to "false" by default.
      </description>
    </attribute>
    <attribute>
      <name>resolveTwice</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean. Flag indicating if the expression should be evaluated twice
        when resolving it: if value resolved is a String that still contains EL
        expressions after the first resolution, a second resolution is done.
        Set to "false" by default. Available since 5.5.
      </description>
    </attribute>
    <attribute>
      <name>local</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean. Flag indicating if the expression should be evaluated in the
        local context where expression is used (render time), or in the
        original context where expression was created (build time).
        This flag is only useful when resolving the expression twice (attribute
        resolveTwice set to true) and when value is not cached (attribute cache
        set to false). Available since 7.10.
      </description>
    </attribute>
    <attribute>
      <name>blockPatterns</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        String indicating that some variables in existing context should be
        "blocked" e.g resolve to null. This is useful when trying to isolate
        a resolution context. Accepted syntax is a comma separated list of the
        variables names, accepting character "*" at the end as a wild card.
        Blocked variabled include the ones exposed via tags c:set, nxu:set, as
        well as variables exposed by the layout system.
        Example: "widget, widgetProperty*". Available since 5.6.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>methodResult</tag-name>
    <handler-class>org.nuxeo.ecm.platform.ui.web.tag.handler.MethodResultTagHandler</handler-class>
    <description>
      <![CDATA[
      <p>
        Facelet tag handler that exposes the result of a method binding as a
        variable. Note that this tag is <b>deprecated</b> since Seam 2.0 handles
        method resolution natively. The tag nxu:set can be used instead.
      </p>
      <p>
        This is helpful to avoid having to define a getter on a class to get
        some rendering info. This is comparable to f:param or ui:param tags, but
        using method bindings instead of value bindings.
      </p>
      <p>
        <b>WARNING</b> : the variable is only exposed inside the tag: this is a
        different behaviour than the c:set tag that can be closed immediately.
      </p>
      Example:
      <pre>
        &lt;nxu:methodResult name="actions" value="#{webActions.getActionsList('SUBVIEW_UPPER_LIST')}"&gt;
          &lt;nxu:dataList var="action" value="#{actions}"&gt;
            ...
          &lt;/nxu:dataList&gt;
        &lt;/nxu:methodResult&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>name</name>
      <required>true</required>
      <type>java.lang.String</type>
      <description>Name of the variable that will be set.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <type>java.lang.Object</type>
      <description>
        Method binding that will be invoked to set the attribute value.
      </description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean. Flag indicating if the method should be invoked when
        constructing the JSF tree. If true, the method is only once and not
        called again when resolving other expressions using the result variable.
        However, the tag will not work as expected when using request variables
        in its expression (like table variable). Set to "false" by default.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>repeat</tag-name>
    <handler-class>org.nuxeo.ecm.platform.ui.web.tag.handler.RepeatTagHandler</handler-class>
    <description>
      <![CDATA[
      <p>
        Facelet tag handler that performs an iteration.
      </p>
      <p>
        This handler is very close to the facelets c:forEach tag handler. It
        holds additional configuration to handle ajax re-rendering of lists,
        avoiding potential JSF duplicate id issues, as well as cache issue,
        when the iteration list changes.
      </p>
      Example:
      <pre>
        &lt;nxu:repeat items="#{layoutNames}" var="layout"&gt;
          &lt;nxl:layout name="#{layout}" value="#{document}" /&gt;
        &lt;/nxu:repeat&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>var</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Name of the variable representing each iteration item. Must be a string.
      </description>
    </attribute>
    <attribute>
      <name>items</name>
      <required>false</required>
      <type>java.lang.Object</type>
      <description>
        Value binding representing the object to iterate on. Available since
        5.7.
      </description>
    </attribute>
    <attribute>
      <name>itemsId</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Identifier for the iteration loop: if this id changes on ajax
        re-render, JSF subcomponents will be re-created. When this attribute
        is not filled, the string representation of the iteration list is
        used instead. Available since 5.7.
      </description>
    </attribute>
    <attribute>
      <name>begin</name>
      <required>false</required>
      <type>java.lang.Integer</type>
      <description>
        Element to start with (0 = first item, 1 = second item, ...). Available
        since 5.7.
      </description>
    </attribute>
    <attribute>
      <name>end</name>
      <required>false</required>
      <type>java.lang.Integer</type>
      <description>
        Element to end with (0 = first item, 1 = second item, ...). Available
        since 5.7.
      </description>
    </attribute>
    <attribute>
      <name>step</name>
      <required>false</required>
      <type>java.lang.Integer</type>
      <description>
        Iteration will only process every step items of the collection,
        starting with the first one. Available since 5.7.
      </description>
    </attribute>
    <attribute>
      <name>index</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Name of the variable representing the iteration index.
      </description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Name of the exported scoped variable for the status of the iteration.
        Object exported is of type javax.servlet.jsp.jstl.core.LoopTagStatus.
        This scoped variable has nested visibility. Available since 5.7.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <type>java.lang.Object</type>
      <description>
        Value binding representing the object to iterate on. Deprecated since
        5.7, use "items" attribute instead.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>actionListenerMethod</tag-name>
    <handler-class>
      org.nuxeo.ecm.platform.ui.web.tag.handler.ActionListenerMethodTagHandler
    </handler-class>
    <description>
      <![CDATA[
      <p>
      Facelet tag handler that add an action listener to the parent component.
      Available since 5.3.1.
      </p>
      <p>
      Parent needs to be an action source for the action listener to be declared
       on it.
      </p>
      <p>
      This is useful when declaring several action listeners on the same parent
      component, and when the order of calls needs to be respected: the action
      listener method declared on a component is the first one called. So this
      method makes it possible to add other action listeners before it, without
      having to declare a class (when using the f:actionListener tag).
      </p>
      <p>
      Since 5.6, this tag can resolve expressions twice, making it possible to
      use it with Nuxeo actions configured to reference an EL expression in
      their definition: first to call action#getLink and then to call the
      actual action defined by another EL expression.
      </p>
      Example:
      <pre>
        &lt;h:commandLink value="Go"&gt;
          &lt;nxu:actionListenerMethod value="#{myBean.performFirstAction}" /&gt;
          &lt;nxu:actionListenerMethod value="#{myBean.performSecondAction}" /&gt;
        &lt;/h:commandLink&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>value</name>
      <required>false</required>
      <method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
      <description>
        MethodBinding representing an action listener method that will be
        notified when this component is activated by the user.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>selectItems</tag-name>
    <component>
      <component-type>org.nuxeo.ecm.platform.ui.web.component.UISelectItems</component-type>
    </component>
    <description>
      <![CDATA[
      <p>
        This tag is similar to the f:selectItems tag, except that it allows to
        iterate on any kind of data, and have control on the resulting
        selection values and labels.
      </p>
      <p>
        It has been adapted to work with datamodel lists wrapped by Seam (when
        using the Datamodel annotation).
      </p>
      Examples:
      <pre>
        &lt;nxu:selectItems value="#{myBean.myList}" var="item"
          itemValue="#{item.id}" itemLabel="#{item.title}" /&gt;

        &lt;nxu:selectItems value="#{documentList}" var="document"
          itemValue="#{document.ref}" itemLabel="#{document.dublincore.title}" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>value</name>
      <required>true</required>
      <type>java.lang.Object</type>
      <description>
        Value binding representing the list to iterate on.
      </description>
    </attribute>
    <attribute>
      <name>var</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Name of the request scope attribute that will be used to set an item
        value and label with flexibility.
      </description>
    </attribute>
    <attribute>
      <name>itemValue</name>
      <required>true</required>
      <type>java.lang.Object</type>
      <description>Value binding resolved to build the item value.</description>
    </attribute>
    <attribute>
      <name>itemLabel</name>
      <required>true</required>
      <type>java.lang.String</type>
      <description>Value binding resolved to build the item label.</description>
    </attribute>
    <attribute>
      <name>itemDisabled</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Value binding resolved to build the item disabled attribute. Available
        since 5.4.
      </description>
    </attribute>
    <attribute>
      <name>itemRendered</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Value binding resolved to exclude the item from the list of selections.
        Available since 5.4.
      </description>
    </attribute>
    <attribute>
      <name>ordering</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Value binding resolved to sort options. Possible values are "id" and
        "label". If not set, no ordering is done. Available since 5.4.
      </description>
    </attribute>
    <attribute>
      <name>caseSensitive</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Value binding resolved to a boolean value, to sort options
        case-insensitively. Does not have any effect if ordering is not set.
        Defaults to false. Available since 5.4.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>selectItem</tag-name>
    <component>
      <component-type>org.nuxeo.ecm.platform.ui.web.component.UISelectItem</component-type>
    </component>
    <description>
      <![CDATA[
      <p>
        This tag is similar to the f:selectItem tag, except that it allows to
        resolve the item from any kind of data, and have control on the
        resulting selection value and label.
      </p>
      Examples:
      <pre>
        &lt;nxu:selectItem value="#{myBean.myElement}" var="item"
          itemValue="#{item.id}" itemLabel="#{item.title}" /&gt;

        &lt;nxu:selectItem value="#{document}" var="document"
          itemValue="#{document.ref}" itemLabel="#{document.dublincore.title}" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>value</name>
      <required>true</required>
      <type>java.lang.Object</type>
      <description>
        Value binding representing the object to generate the select option
        from.
      </description>
    </attribute>
    <attribute>
      <name>var</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Name of the request scope attribute that will be used to set an item
        value and label with flexibility.
      </description>
    </attribute>
    <attribute>
      <name>itemValue</name>
      <required>true</required>
      <type>java.lang.Object</type>
      <description>Value binding resolved to build the item value.</description>
    </attribute>
    <attribute>
      <name>itemLabel</name>
      <required>true</required>
      <type>java.lang.String</type>
      <description>Value binding resolved to build the item label.</description>
    </attribute>
    <attribute>
      <name>itemDisabled</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Value binding resolved to build the item disabled attribute. Available
        since 5.4.
      </description>
    </attribute>
    <attribute>
      <name>itemRendered</name>
      <required>true</required>
      <type>java.lang.Boolean</type>
      <description>
        Value binding resolved to exclude the item from selections. Available
        since 5.4.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>inputFile</tag-name>
    <component>
      <component-type>org.nuxeo.ecm.platform.ui.web.component.file.UIInputFile</component-type>
      <handler-class>com.sun.faces.facelets.tag.jsf.html.HtmlComponentHandler</handler-class>
    </component>
    <description>
      <![CDATA[
      <p>
        Util tag to perform a complex file upload dealing with edition and
        deletion.
      </p>
      <p>
        It only deals with Nuxeo Core blobs.
      </p>
      <p>
        This tag uses a component that will handle its rendering using other
        existing components. It will present a radio menu with existing choices:
        upload a file, keep it (eventually change its filename), delete it, or do
        nothing. Choices will be presented automatically given values and tag
        attributes (is there a blob set, is there a filename, is the blob
        required, etc...).
      </p>
      <p>
        It uses the nxu:outputFile related component rendering for the "keep"
        option and the tomahwak t:inputFileUpload tag for the "upload" option.
      </p>
      <p>
        It is possible to use a facet named "download" to override the default
        "keep" option rendering (e.g the document download presentation).
      </p>
      Example:
      <pre>
        &lt;nxu:inputFile value="#{document.file.content}"
          filename="#{document.file.content.filename}"
          editFilename="true" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>value</name>
      <required>false</required>
      <type>org.nuxeo.ecm.core.api.Blob</type>
      <description>Value binding representing the blob</description>
    </attribute>
    <attribute>
      <name>filename</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Value binding representing the blob filename. If set, will be set using
        the newly uploaded blob filename and will be presented as the download
        link value unless the downloadLabel attribute is provided.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The component identifier for this component. This value must be unique
        within the closest parent component that is a naming container.
      </description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating whether or not this component should be rendered (during
        Render Response Phase), or processed on any subsequent form submit.
      </description>
    </attribute>
    <attribute>
      <name>required</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating that the user is required to provide a submitted value
        for the blob.
      </description>
    </attribute>
    <attribute>
      <name>editFilename</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating whether or not this component should present an input
        area to set the blob filename. It is only presented on the "keep"
        option.
      </description>
    </attribute>
    <attribute>
      <name>iconRendered</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean flag indicating whether or not the file icon should be rendered.
        Defaults to true.
      </description>
    </attribute>
    <attribute>
      <name>downloadLabel</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Value binding that will be used as the download link value, and will
        attempt to be translated.
      </description>
    </attribute>
    <attribute>
      <name>editFilenameLabel</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Value binding that will be rendered before the edit file name input
        text, and will attempt to be translated.
      </description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <type>java.lang.String</type>
      <description>
        Javascript onchange event handler, set on the radio buttons
      </description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <type>java.lang.String</type>
      <description>
        Javascript onclick event handler, set on the radio button
      </description>
    </attribute>
    <attribute>
      <name>onselect</name>
      <type>java.lang.String</type>
      <description>
        Javascript onselect event handler, set on the radio button
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>validateFileSize</tag-name>
    <validator>
      <validator-id>InputFileSizeValidator</validator-id>
    </validator>
    <description>
      <![CDATA[
      <p>
        Registers an InputFileSizeValidator instance on the UIComponent associated
        with the closest parent UIComponent custom action.
      </p>
      Example:
      <pre>
        &lt;nxu:inputFile value="#{document.file.content}"
          filename="#{document.file.filename}"
          editFilename="true"&gt;
          &lt;nxu:validateFileSize maxSize="10Mo" /&gt;
        &lt;/nxu:inputFile>
      </pre>
      ]]>
    </description>
    <tag-class>Null</tag-class>
    <attribute>
      <name>maxSize</name>
      <type>java.lang.String</type>
      <description>
        String representing the maximum size accepted for a file. Examples:
        10Ko, 10Mo, 10Go.
      </description>
    </attribute>
    <attribute>
      <name>binding</name>
      <description>
        A ValueExpression that evaluates to an instance of the validator.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>validateFileMimetype</tag-name>
    <validator>
      <validator-id>InputFileMimetypeValidator</validator-id>
    </validator>
    <description>
      <![CDATA[
      <p>
        Register an InputFileMimetypeValidator instance on the UIComponent
        associated with the closest parent UIComponent custom action.
      </p>
      Example:
      <pre>
        &lt;nxu:inputFile value="#{document.file.content}"
          filename="#{document.file.filename}"
          editFilename="true"&gt;
          &lt;nxu:validateFileMimetype extensions=".jpg, .png" /&gt;
        &lt;/nxu:inputFile>
      </pre>
      ]]>
    </description>
    <attribute>
      <name>extensions</name>
      <type>java.lang.String</type>
      <description>
        String representing the list of extensions to check for a file,
        separated by commas.
      </description>
    </attribute>
    <attribute>
      <name>authorized</name>
      <type>java.lang.Boolean</type>
      <description>
        Boolean indicating if the list of extensions represents authorized
        extensions or unauthorized ones. Defaults to true.
      </description>
    </attribute>
    <attribute>
      <name>binding</name>
      <description>
        A ValueExpression that evaluates to an instance of the validator.
      </description>
    </attribute>
    <attribute>
      <name>hidden</name>
      <type>java.lang.Boolean</type>
      <description>
        Boolean indicating if the list of extensions is displayed. Defaults to
        false.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>validateDocumentConstraint</tag-name>
    <validator>
      <validator-id>DocumentConstraintValidator</validator-id>
    </validator>
    <description>
      <![CDATA[
      <p>
        Registers an DocumentConstraintValidator instance on the UIComponent
        associated with the closest parent input.
      </p>
      <p>
        The bound value is resolved, and if it matches a document, the
        corresponding field constraints are checked (if not, no validation
        is performed).
      <p>
      Example:
      <pre>
        &lt;nxu:validateDocumentConstraint handleSubProperties="false" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>handleSubProperties</name>
      <type>java.lang.Boolean</type>
      <description>
        Boolean indicating if sub properties should be validated too. Defaults
        to true.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>outputFile</tag-name>
    <component>
      <component-type>org.nuxeo.ecm.platform.ui.web.component.file.UIOutputFile</component-type>
      <handler-class>com.sun.faces.facelets.tag.jsf.html.HtmlComponentHandler</handler-class>
    </component>
    <description>
      <![CDATA[
      <p>
        Util tag to perform a blob rendering, useful if a rest URL cannot be
        provided (on a JSF form postback for instance).
      </p>
      <p>
        It only deals with Nuxeo Core blobs.
      </p>
      <p>
        Display is an immediate link to the blob, with filename as link value if
        provided, together with the blob mimetype icon.
      </p>
      Example:
      <pre>
        &lt;nxu:outputFile value="#{document.file.content}"
          filename="#{document.file.filename}" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>value</name>
      <required>false</required>
      <type>org.nuxeo.ecm.core.api.Blob</type>
      <description>Value binding representing the blob</description>
    </attribute>
    <attribute>
      <name>filename</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Value binding representing the blob filename. If set, will be presented
        as the download link value unless the downloadLabel attribute is
        provided.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The component identifier for this component. This value must be unique
        within the closest parent component that is a naming container.
      </description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating whether or not this component should be rendered (during
        Render Response Phase), or processed on any subsequent form submit.
      </description>
    </attribute>
    <attribute>
      <name>iconRendered</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean flag indicating whether or not the file icon should be rendered.
        Defaults to true.
      </description>
    </attribute>
    <attribute>
      <name>downloadLabel</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Value binding that will be used as the download link value, and will
        attempt to be translated.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>jsInputList</tag-name>
    <component>
      <component-type>
        org.nuxeo.ecm.platform.ui.web.component.list.UIJavascriptList
      </component-type>
      <handler-class>
        org.nuxeo.ecm.platform.ui.web.binding.alias.AliasAnchorComponentHandler
      </handler-class>
    </component>
    <description>
      <![CDATA[
      <p>
        Tag that perform edition of a list of items.
      </p>
      <p>
        It only deals with lists or arrays of serializable objects.
      </p>
      <p>
        This tags puts a model in the request which can be accessed to get
        information about each list item value.
      </p>
      <p>
        This tags adds and removes elements in the list using JavaScript
        functions. Available since 7.2.
      </p>
      Example:
      <pre>
        &lt;nxu:jsInputList value="#{currentDocument.files.files}"
          id="myId" model="model" diff="true"
          template="#{nxd:defaultValue('files', 'files')}"&gt;
          &lt;h:panelGrid columns="2"&gt;
            &lt;h:inputHidden&gt;
              &lt;f:passThroughAttribute name="name" value="myFormId:myId:#{isListTemplate ? 'TEMPLATE_INDEX_MARKER:': ''}rowIndex[]" /&gt;
              &lt;f:attribute name="value" value="#{isListTemplate ? 'TEMPLATE_INDEX_MARKER' : model.rowIndex}"/&gt;
            &lt;/h:inputHidden&gt;
            &lt;h:panelGroup&gt;
              &lt;a href="#" class="deleteBtn"
                 onclick="return nuxeo.utils.deleteFromList(jQuery(this).closest('.listItem'))" /&gt;
              &lt;a href="#" class="moveUpBtn"
                 onclick="return nuxeo.utils.moveUpList(jQuery(this).closest('.listItem'))" /&gt;
              &lt;a href="#" class="moveDownBtn"
                 onclick="return nuxeo.utils.moveDownList(jQuery(this).closest('.listItem'))" /&gt;
            &lt;/h:panelGroup&gt;
            &lt;h:panelGroup&gt;
              &lt;table&gt;
                &lt;tbody&gt;
                  &lt;tr&gt;
                    &lt;td class="fieldColumn"&gt;
                      &lt;h:inputText value="#{model.rowData} /&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/tbody&gt;
              &lt;/table&gt;
            &lt;/h:panelGroup&gt;
          &lt;/h:panelGrid&gt;
        &lt;/nxu:jsInputList&gt;

        &lt;a id="myId_add" href="#nogo"
           onclick="return nuxeo.utils.addFromListTemplate('myForm:myId', jQuery(this).prev());"&gt;
          &lt;h:outputText value="#{messages['command.add']}" /&gt;
        &lt;/a&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>value</name>
      <required>false</required>
      <type>java.util.List</type>
      <description>Value binding representing the list to edit</description>
    </attribute>
    <attribute>
      <name>defaultValue</name>
      <required>false</required>
      <type>java.util.List</type>
      <description>
        Value binding representing the default value for the list to edit. This
        is only resolved when the value attribute resolves to a null or empty
        value, and can be useful to set default values from the interface,
        without having to resolve them in the original value binding method.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The component identifier for this component. This value must be unique
        within the closest parent component that is a naming container.
      </description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating whether or not this component should be rendered (during
        Render Response Phase), or processed on any subsequent form submit.
      </description>
    </attribute>
    <attribute>
      <name>required</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating that the user is required to provide a submitted value
        for the list. WARNING: when setting the "diff" attribute to true, this
        flag will have no effect.
      </description>
    </attribute>
    <attribute>
      <name>model</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        <![CDATA[
        <p>
          String. The name of a request-scope attribute under which the data
          model will be exposed. The data model handles current index, it gives
          access to informations about the current item. For instance, following
          value bindings can be used inside the tag:
        </p>
        <ul>
          <li> #{model.rowCount}: size of the model.</li>
          <li> #{model.rowData}: current item of the list (changes while
               iterating).</li>
          <li> #{model.rowIndex}: current index integer.</li>
          <li> #{model.rowNew}: boolean indicating if this row was already
               present in the original list.</li>
        </ul>
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>diff</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean (default value: false) indicating whether a diff (instead of the
        whole new list) should be set when updating the model after validation.
        This is useful when managing large lists. Note that if the list is set
        on a document model, the document should be saved in repository after
        updating the model, so that the whole list is refetched correctly. Note
        also that no validation error will occur if the component is required.
      </description>
    </attribute>
    <attribute>
      <name>removeEmpty</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean (default value: false) indicating whether empty values (null or
        equal to template) should be removed from the list when saving.
      </description>
    </attribute>
    <attribute>
      <name>number</name>
      <required>false</required>
      <type>java.lang.Integer</type>
      <description>
        Integer (default value: null) indicating the number of rows that should
        be presented by default in edit mode. These rows are added when the
        editable model is built.
      </description>
    </attribute>
    <attribute>
      <name>template</name>
      <required>false</required>
      <type>java.lang.Object</type>
      <description>
        Object representing the default value to add to the list. When using a
        document model, you can use the function nxd:defaultValue(schemaName,
        fieldName) to get the default value for this complex type.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>inputList</tag-name>
    <component>
      <component-type>
        org.nuxeo.ecm.platform.ui.web.component.list.UIEditableList
      </component-type>
      <handler-class>
        org.nuxeo.ecm.platform.ui.web.binding.alias.AliasAnchorComponentHandler
      </handler-class>
    </component>
    <description>
      <![CDATA[
      <p>
        Tag that perform edition of a list of items. Note that this tag is
        <b>deprecated</b> since Nuxeo 7.2: use nxu:jsInputList instead.
      </p>
      <p>
        It only deals with lists or arrays of serializable objects.
      </p>
      <p>
        This tags puts a model in the request which can be accessed to get
        information about each list item value.
      </p>
      <p>
        Examples make extensive use of ajax4jsf so that validation of other
        components that may be on the page does not occur while adding and deleting
        items in the list.
      </p>
      Example:
      <pre>
        &lt;a4j:region renderRegionOnly="false"&gt;
          &lt;a4j:outputPanel ajaxRendered="true"&gt;
            &lt;nxu:inputList value="#{currentDocument.files.files}"
              id="files" model="model" diff="true"
              template="#{nxd:defaultValue('files', 'files')}"&gt;
              &lt;h:panelGrid columns="2"&gt;
                &lt;a4j:commandLink immediate="true"
                  actionListener="#{editableListBean.performAction}"
                  reRender="fichiers" bypassUpdates="true"&gt;
                  &lt;h:graphicImage value="/icons/delete.png" /&gt;
                  &lt;f:param name="for" value="fichiers" /&gt;
                  &lt;f:param name="index" value="#{model.rowIndex}" /&gt;
                  &lt;f:param name="type" value="remove" /&gt;
                &lt;/a4j:commandLink&gt;
                &lt;h:panelGroup&gt;
                  &lt;nxu:inputFile value="#{model.rowData.file}"
                    filename="#{model.rowData.fileName}" editFilename="false"
                    id="file" /&gt;
                  &lt;h:message for="file" /&gt;
                &lt;/h:panelGroup&gt;
              &lt;/h:panelGrid&gt;
            &lt;/nxu:inputList&gt;
          &lt;/a4j:outputPanel&gt;
          &lt;a4j:commandLink immediate="true"
            actionListener="#{editableListBean.performAction}"
            reRender="fichiers"&gt;
            &lt;h:graphicImage value="/icons/action_add.gif" /&gt;
            &lt;f:param name="for" value="fichiers" /&gt;
            &lt;f:param name="type" value="add" /&gt;
          &lt;/a4j:commandLink&gt;
        &lt;/a4j:region&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>value</name>
      <required>false</required>
      <type>java.util.List</type>
      <description>Value binding representing the list to edit</description>
    </attribute>
    <attribute>
      <name>defaultValue</name>
      <required>false</required>
      <type>java.util.List</type>
      <description>
        Value binding representing the default value for the list to edit. This
        is only resolved when the value attribute resolves to a null or empty
        value, and can be useful to set default values from the interface,
        without having to resolve them in the original value binding method.
        Available since 5.4.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The component identifier for this component. This value must be unique
        within the closest parent component that is a naming container.
      </description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating whether or not this component should be rendered (during
        Render Response Phase), or processed on any subsequent form submit.
      </description>
    </attribute>
    <attribute>
      <name>required</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating that the user is required to provide a submitted value
        for the list. WARNING: when setting the "diff" attribute to true, this
        flag will have no effect.
      </description>
    </attribute>
    <attribute>
      <name>model</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        <![CDATA[
        <p>
          String. The name of a request-scope attribute under which the data
          model will be exposed. The data model handles current index, it gives
          access to informations about the current item. For instance, following
          value bindings can be used inside the tag:
        </p>
        <ul>
          <li> #{model.rowCount}: size of the model.</li>
          <li> #{model.rowData}: current item of the list (changes while
               iterating).</li>
          <li> #{model.rowIndex}: current index integer.</li>
          <li> #{model.rowNew}: boolean indicating if this row was already
               present in the original list.</li>
        </ul>
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>diff</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean (default value: false) indicating whether a diff (instead of the
        whole new list) should be set when updating the model after validation.
        This is useful when managing large lists. Note that if the list is set
        on a document model, the document should be saved in repository after
        updating the model, so that the whole list is refetched correctly. Note
        also that no validation error will occur if the component is required.
      </description>
    </attribute>
    <attribute>
      <name>removeEmpty</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Boolean (default value: false) indicating whether empty values (null or
        equal to template) should be removed from the list when saving.
      </description>
    </attribute>
    <attribute>
      <name>number</name>
      <required>false</required>
      <type>java.lang.Integer</type>
      <description>
        Integer (default value: null) indicating the number of rows that should
        be presented by default in edit mode. These rows are added when the
        editable model is built.
      </description>
    </attribute>
    <attribute>
      <name>template</name>
      <required>false</required>
      <type>java.lang.Object</type>
      <description>
        Object representing the default value to add to the list. When using a
        document model, you can use the function nxd:defaultValue(schemaName,
        fieldName) to get the default value for this complex type.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>editor</tag-name>
    <component>
      <component-type>
        org.nuxeo.ecm.platform.ui.web.component.editor.UIHtmlEditor
      </component-type>
      <handler-class>
        org.nuxeo.ecm.platform.ui.web.tag.handler.GenericHtmlComponentHandler
      </handler-class>
    </component>
    <description>
      <![CDATA[
      <p>Tag rendering a HTML editor relying on TinyMCE library.</p>
      Example:
      <pre>
        &lt;nxu:editor
          value="#{document.dublincore.description}"
          required="false" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>value</name>
      <required>true</required>
      <type>java.lang.String</type>
      <description>Value binding representing the HTML text.</description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The component identifier for this component. This value must be unique
        within the closest parent component that is a naming container.
      </description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating whether or not this component should be rendered (during
        Render Response Phase), or processed on any subsequent form submit.
      </description>
    </attribute>
    <attribute>
      <name>required</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating that the user is required to provide a submitted value
        for the blob.
      </description>
    </attribute>
    <attribute>
      <name>width</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>The textarea width. Defaults to "640".</description>
    </attribute>
    <attribute>
      <name>height</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>The textarea height. Defaults to "400".</description>
    </attribute>
    <attribute>
      <name>editorSelector</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The class to use to identify text areas to turn into html editors.
        Defaults to "mceEditor". See the editor_selector option in TinyMCE
        (http://wiki.moxiecode.com/index.php/TinyMCE:Configuration/editor_selector).
      </description>
    </attribute>
    <attribute>
      <name>cols</name>
      <required>false</required>
      <type>java.lang.Integer</type>
      <description>
        The cols attribute sets the number of columns to display. Available
        since 5.3.1.
      </description>
    </attribute>
    <attribute>
      <name>rows</name>
      <required>false</required>
      <type>java.lang.Integer</type>
      <description>
        The rows attribute sets the number of rows to display. Available since
        5.3.1.
      </description>
    </attribute>
    <attribute>
      <name>disableHtmlInit</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        If set to true, the default display will be the text display (not html
        editor). Available since 5.3.1.
      </description>
    </attribute>
    <attribute>
      <name>configuration</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        JSON configuration for TinyMCE initialization, merged with default
        configuration. Available since 8.1. Example: {"toolbar4": "paste"}
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>inputDateTime</tag-name>
    <component>
      <component-type>org.richfaces.Calendar</component-type>
      <renderer-type>org.richfaces.CalendarRenderer</renderer-type>
      <handler-class>
        org.nuxeo.ecm.platform.ui.web.tag.handler.InputDateTimeTagHandler
      </handler-class>
    </component>
    <description>
      <![CDATA[
      <p>Calendar with date and time chosing.</p>
      Example:
      <pre>
        &lt;nxu:inputDateTime
          value="#{document.project.dueDate}"
          format="mm/dd/YY"
          required="false" /&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>value</name>
      <required>true</required>
      <type>java.util.Date</type>
      <description>Value binding representing the date and time</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating whether or not this component should be rendered (during
        Render Response Phase), or processed on any subsequent form submit.
      </description>
    </attribute>
    <attribute>
      <name>required</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating that the user is required to provide a submitted value
        for the blob.
      </description>
    </attribute>
    <attribute>
      <name>format</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        String format for the date and time, as described by the
        java.text.SimpleDateFormat class, and as used in the standard
        DateTimeConverter. Default value is "dd/MM/yyyy HH:mm".
      </description>
    </attribute>
    <attribute>
      <name>showsTime</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating that the calendar must show a time choice. Ignored since
        5.4.2 as time is shown according to date format chosen.
      </description>
    </attribute>
    <attribute>
      <name>locale</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        String representing the locale to use for the calendar. Current locale
        is used if not set.
      </description>
    </attribute>
    <attribute>
      <name>timeZone</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        String timeZone ID. The server time zone is used if not set.
      </description>
    </attribute>
    <attribute>
      <name>triggerImg</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Image path to use for the trigger. Available since 5.4.
      </description>
    </attribute>
    <attribute>
      <name>triggerLabel</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Label to display on the trigger image. Defaults to "...".
      </description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>style class to set on the input tag.</description>
    </attribute>
    <attribute>
      <name>triggerStyleClass</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        style class to set on the trigger button tag, defaults to
        'calendarTrigger'.
      </description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <type>java.lang.String</type>
      <description>
        Javascript onchange event handler, set on the text input
      </description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <type>java.lang.String</type>
      <description>
        Javascript onclick event handler, set on the text input. Ignored since
        5.4.2 as RichFaces calendar does not handle it.
      </description>
    </attribute>
    <attribute>
      <name>onselect</name>
      <type>java.lang.String</type>
      <description>
        Javascript onselect event handler, set on the text input. Ignored since
        5.4.2 as RichFaces calendar does not handle it.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>valueHolder</tag-name>
    <component>
      <component-type>
        org.nuxeo.ecm.platform.ui.web.component.holder.UIValueHolder
      </component-type>
      <handler-class>
        org.nuxeo.ecm.platform.ui.web.component.holder.ValueHolderTagHandler
      </handler-class>
    </component>
    <description>
      <![CDATA[
      <p>
        Tag to hold a value and expose it to the request context.
      </p>
      <p>
        It can control a value to submit as any input component, or not.
      </p>
      <p>
        Available since 5.5.
      </p>
      Example:
      <pre>
        &lt;nxu:valueHolder var="myVar" value="#{myComp.myValue}"&gt;
          &lt;h:outputText value="#{myVar}" /&gt;
        &lt;/nxu:valueHolder&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>value</name>
      <required>false</required>
      <type>java.lang.Object</type>
      <description>Value binding representing the item to hold</description>
    </attribute>
    <attribute>
      <name>defaultValue</name>
      <required>false</required>
      <type>java.lang.Object</type>
      <description>
        Value binding representing the default value for the item to hold.
        is only resolved when the value attribute resolves to a null or empty
        value, and can be useful to set default values from the interface,
        without having to resolve them in the original value binding method.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        The component identifier for this component. This value must be unique
        within the closest parent component that is a naming container.
      </description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating whether or not this component should be rendered (during
        Render Response Phase), or processed on any subsequent form submit.
      </description>
    </attribute>
    <attribute>
      <name>required</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating that the user is required to provide a submitted value.
      </description>
    </attribute>
    <attribute>
      <name>var</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        String. The name of a request-scope attribute under which the value
        held will be exposed.
      </description>
    </attribute>
    <attribute>
      <name>submitValue</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Flag indicating whether or not the value held by this component should
        be submitted to the backing bean. Defaults to true.
      </description>
    </attribute>
  </tag>

  <tag>
    <tag-name>selectOneRadio</tag-name>
    <component>
      <component-type>javax.faces.SelectOne</component-type>
      <renderer-type>
        org.nuxeo.ecm.platform.ui.web.component.radio.SelectOneRadioRenderer
      </renderer-type>
      <renderer-class>
        org.nuxeo.ecm.platform.ui.web.component.radio.SelectOneRadioRenderer
      </renderer-class>
      <handler-class>
        org.nuxeo.ecm.platform.ui.web.tag.handler.GenericHtmlComponentHandler
      </handler-class>
    </component>
    <description>
      <![CDATA[
        <p>
          Allows creating radio checkboxes, that will be referenced for display
          in another part of the page when used in conjunction with nxu:radio.
        </p>
        Example:
        <pre>
          &lt;nxu:selectOneRadio id="objectType"
            value="#{relationActions.objectType}" layout="spread"&gt;
            &lt;f:selectItem
              itemLabel="#{messages['label.relation.object.text']}"
              itemValue="literal" /&gt;
            &lt;f:selectItem itemLabel="#{messages['label.relation.object.uri']}"
              itemValue="uri" /&gt;
            &lt;f:selectItem
              itemLabel="#{messages['label.relation.object.documentUid']}"
              itemValue="document" /&gt;
          &lt;/nxu:selectOneRadio&gt;
          [...]
          &lt;nxu:radio for="objectType" index="0" id="literal" /&gt;
          [...]
          &lt;nxu:radio for="objectType" index="1" id="uri" /&gt;
          [...]
          &lt;nxu:radio for="objectType" index="2" id="document" /&gt;
        </pre>
      ]]>
    </description>
  </tag>

  <tag>
    <tag-name>radio</tag-name>
    <component>
      <component-type>org.nuxeo.Radio</component-type>
      <renderer-type>
        org.nuxeo.ecm.platform.ui.web.component.radio.SingleRadioRenderer
      </renderer-type>
      <renderer-class>
        org.nuxeo.ecm.platform.ui.web.component.radio.SingleRadioRenderer
      </renderer-class>
      <handler-class>
        org.nuxeo.ecm.platform.ui.web.tag.handler.GenericHtmlComponentHandler
      </handler-class>
    </component>
    <description>
      <![CDATA[
        <p>
          Allows placing radio checkboxes by reference, to ve used in
          conjunction with nxu:selectOneRadio.
        </p>
        Example:
        <pre>
          &lt;nxu:selectOneRadio id="objectType"
            value="#{relationActions.objectType}" layout="spread"&gt;
            &lt;f:selectItem
              itemLabel="#{messages['label.relation.object.text']}"
              itemValue="literal" /&gt;
            &lt;f:selectItem itemLabel="#{messages['label.relation.object.uri']}"
              itemValue="uri" /&gt;
            &lt;f:selectItem
              itemLabel="#{messages['label.relation.object.documentUid']}"
              itemValue="document" /&gt;
          &lt;/nxu:selectOneRadio&gt;
          [...]
          &lt;nxu:radio for="objectType" index="0" id="literal" /&gt;
          [...]
          &lt;nxu:radio for="objectType" index="1" id="uri" /&gt;
          [...]
          &lt;nxu:radio for="objectType" index="2" id="document" /&gt;
        </pre>
      ]]>
    </description>
  </tag>

  <tag>
    <tag-name>form</tag-name>
    <handler-class>org.nuxeo.ecm.platform.ui.web.tag.handler.FormTagHandler</handler-class>
    <description>
      <![CDATA[
      <p>
        Tag handler generating a form (or not) depending on attributes values, useful when
        handling widgets that may need to be surrounded by a form (or not) depending on their
        configuration.
       </p>
      <p>
        Available since 8.2
      </p>
      Example:
      <pre>
        &lt;nxu:form id="#{widget.id}_form"
          useAjaxForm="#{useAjaxForm and supportAjax}"
          disableDoubleClickShield="#{disableDoubleClickShield}"&gt;
          &lt;nxl:widget widget="#{widget}" value="#{fieldOrValue}" /&gt;
        &lt;/nxu:form&gt;
      </pre>
      ]]>
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>Value binding resolving to the form id.</description>
    </attribute>
    <attribute>
      <name>skip</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Value binding resolving to a boolean value: if true, the form
        will not be generated, but the tag content will still be taken into
        account. Defaults to false.
      </description>
    </attribute>
    <attribute>
      <name>disableDoubleClickShield</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Value binding resolving to a boolean value: if true, the form
        will not prevent clicking twice on buttons in the form. Defaults to
        false.
      </description>
    </attribute>
    <attribute>
      <name>useAjaxForm</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Value binding resolving to a boolean value: if true, the form
        enctype attribute will not handle multipart. Defaults to false.
      </description>
    </attribute>
    <attribute>
      <name>disableMultipartForm</name>
      <required>false</required>
      <type>java.lang.Boolean</type>
      <description>
        Value binding resolving to a boolean value: if true, the form
        enctype attribute will not handle multipart. Defaults to false.
      </description>
    </attribute>
    <attribute>
      <name>onsubmit</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Javascript method to be called when the form is submitted.
      </description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <type>java.lang.String</type>
      <description>
        Style class to be set on the form.
      </description>
    </attribute>
  </tag>

  <!-- old tomahawk tags, migrated to use RichFaces tags -->

  <tag>
    <tag-name>dataList</tag-name>
    <component>
      <component-type>org.richfaces.List</component-type>
      <renderer-type>org.richfaces.ListRenderer</renderer-type>
      <handler-class>org.richfaces.taglib.ListHandler</handler-class>
    </component>
    <description>
      Compatibility tag relying on RichFaces rich:dataList tag features.
    </description>
  </tag>

  <tag>
    <tag-name>dataTable</tag-name>
    <component>
      <component-type>javax.faces.HtmlDataTable</component-type>
      <renderer-type>javax.faces.Table</renderer-type>
      <handler-class>org.nuxeo.ecm.platform.ui.web.binding.alias.AliasAnchorComponentHandler</handler-class>
    </component>
    <description>
      Compatibility tag relying on JSF h:dataTable tag features.
    </description>
  </tag>

  <tag>
    <tag-name>column</tag-name>
    <component>
      <component-type>javax.faces.Column</component-type>
    </component>
    <description>
      Compatibility tag relying on JSF h:column tag features.
    </description>
  </tag>

  <tag>
    <tag-name>inputDate</tag-name>
    <component>
      <component-type>nuxeo.web.disabled</component-type>
    </component>
    <description>
      Disabled component that will display a corresponding message, the tag declaration kept to avoid page crash.
    </description>
  </tag>

  <tag>
    <tag-name>inputCalendar</tag-name>
    <component>
      <component-type>nuxeo.web.disabled</component-type>
    </component>
    <description>
      Disabled component that will display a corresponding message, the tag declaration kept to avoid page crash.
    </description>
  </tag>

  <tag>
    <tag-name>schedule</tag-name>
    <component>
      <component-type>nuxeo.web.disabled</component-type>
    </component>
    <description>
      Disabled component that will display a corresponding message, the tag declaration kept to avoid page crash.
    </description>
  </tag>

  <tag>
    <tag-name>graphicImage</tag-name>
    <component>
      <component-type>javax.faces.HtmlGraphicImage</component-type>
      <renderer-type>javax.faces.NXImage</renderer-type>
      <handler-class>
        org.nuxeo.ecm.platform.ui.web.tag.handler.GenericHtmlComponentHandler
      </handler-class>
    </component>
    <description>
      Compatibility tag, see nxh:graphicImage instead.
    </description>
  </tag>

  <tag>
    <tag-name>inputFileUpload</tag-name>
    <component>
      <component-type>nuxeo.web.disabled</component-type>
    </component>
    <description>
      Disabled component that will display a corresponding message, the tag declaration kept to avoid page crash.
    </description>
  </tag>

  <tag>
    <tag-name>lazyTree</tag-name>
    <component>
      <component-type>nuxeo.web.disabled</component-type>
    </component>
    <description>
      Disabled component that will display a corresponding message, the tag declaration kept to avoid page crash.
    </description>
  </tag>

</facelet-taglib>