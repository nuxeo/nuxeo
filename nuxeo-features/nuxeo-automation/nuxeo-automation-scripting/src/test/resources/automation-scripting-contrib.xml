<?xml version="1.0"?>
<component name="org.nuxeo.automation.scripting.testContrib" version="1.0">

  <extension target="org.nuxeo.ecm.core.operation.OperationServiceComponent"
             point="operations">
  <operation
          class="org.nuxeo.automation.scripting.test.operations.ContextModificationTest" />
    <operation class="org.nuxeo.automation.scripting.test.operations.TestUsername"/>
    <operation class="org.nuxeo.automation.scripting.test.operations.TestWrappers"/>
    <operation class="org.nuxeo.automation.scripting.test.operations.TestEchoParameter"/>
  </extension>

  <extension target="org.nuxeo.automation.scripting.internals.AutomationScriptingComponent" point="operation">

    <scriptedOperation id="Scripting.HelloWorld">
       <inputType>string</inputType>
       <outputType>string</outputType>
       <category>Scripting</category>
       <param name="lang" type="string"/>

       <script>
         function run(input, params) {
           if (params.lang === "fr") {
             return "Bonjour " + input;
           }
           return "Hello " + input;
         }
       </script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.AddFacetInSubTree">
       <inputType>Document</inputType>
       <outputType>Documents</outputType>
       <category>Scripting</category>
       <param name="facet" type="string"/>
       <param name="type" type="string"/>

       <script><![CDATA[
         function run(input, params) {

            var query = "select * from " + params.type + " where ecm:path startswith '";
            query = query + input.getPath();
            query = query + "'";

            //println("query = " + query);
            var subDocs = Document.Query(null, {
                "query": query
            });
            //println("Query run with " + subDocs.size() + " result");
            var updated = [];
            for (var i = 0; i < subDocs.size(); i++) {
                var doc = subDocs.get(i);
                if (!doc.hasFacet(params.facet)) {
                    doc.addFacet(params.facet);
                    updated.push(Document.Save(doc, {}));
                }
            }
            return updated;
        }
         ]]>
       </script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestOperationCtx">
       <inputType>Document</inputType>
       <outputType>Document</outputType>
       <category>Scripting</category>
       <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });

            var newDoc = Document.Create(root, {
                "type" : "File",
                "name" : "newDoc",
                "properties" : {
                    "dc:title" : "New Title",
                    "dc:source" : "JavaScript",
                    "dc:subjects" : [ "from", "javascript" ]
                }
            });

            // Test the first Context entry injection
            newDoc = Document.Update(newDoc, {
                "properties" : {
                    "dc:nature" : ctx.test
                }
            });

            // Context modification
            Testing.ContextModificationTest(null, {});

            // Update doc values with new Context values
            newDoc = Document.Update(newDoc, {
                "properties" : {
                    "dc:description" : ctx.test,
                    "dc:title" : ctx.new,
                    "dc:creator" : currentUser.name
                }
            });

            return newDoc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestLoopWithDifferentParameters">
      <inputType>void</inputType>
      <outputType>string</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          var ret = "";
          for (var i = 1; i <= 10; i++) {
            var param = "P" + i;
            var result = Test.EchoParameter(input,
              { 'param': param,
                'dummy': param // using twice the same value produces hashcode collisions
              }
            );
            ret += result + " ";
          }
          return ret;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestBlob">
      <inputType>Blob</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <param name="document" type="string"/>

      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });

            var newDoc = Document.Create(root, {
                "type" : "File",
                "name" : "newDoc",
                "properties" : {
                    "dc:title" : "New Title",
                    "dc:source" : "JavaScript",
                    "dc:subjects" : [ "from", "javascript" ]
                }
            });

            var blob = Blob.AttachOnDocument(input, {
                "document" : params.document
            });

            Log(null, {
                "message" : "LogOperation is working so much - Blob title:"+blob.filename,
                "level" : "info"
            });

            return newDoc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestComplexProperties">
      <inputType>Blob</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <param name="document" type="string"/>

      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });
            var newDoc = Document.Create(root, {
                "type" : params.type,
                "name" : params.name,
                "properties" : params.properties
            });

            return newDoc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestSetBlob">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <param name="file" type="string"/>

      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });

            var newDoc = Document.Create(root, {
                "type" : "File",
                "name" : "newDoc",
                "properties" : {
                    "dc:title" : "New Title",
                    "dc:source" : "JavaScript",
                    "dc:subjects" : [ "from", "javascript" ]
                }
            });

            Document.SetBlob(newDoc, {
              'file': input,
              'save': true
            });

            return newDoc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestInputDocumentList">
      <inputType>void</inputType>
      <outputType>Documents</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });

            var children = Document.GetChildren(root, {});

            Context.PushDocumentList(children, {});

            return children;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestOperationWF">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });

            var newDoc = Document.Create(root, {
                "type" : "File",
                "name" : "newDoc",
                "properties" : {
                    "dc:title" : ctx.WorkflowVariables.var,
                    "dc:description" : ctx.NodeVariables.var
                }
            });

            return newDoc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestChainWithDashes">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {

            var document = my_chain_with_dashes(input, {});

            return document;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestWrappers">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
            return Test.Wrappers(input, {
                "value" : params.doc
            });
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestList">
      <inputType>void</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <param name="document" type="string"/>

      <script><![CDATA[
        function run(input, params) {
          return Document.Update(input, {
            "properties" : {
                "list:items" : ["newValue", "att2", "att3"]
            }
          });
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestLoginAsContext">
      <inputType>void</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <param name="document" type="string"/>

      <script><![CDATA[
        function run(input, params) {
          return Test.Username(null, {});
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestLoginAsOperation">
      <inputType>void</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <param name="document" type="string"/>

      <script><![CDATA[
        function run(input, params) {
          Auth.LoginAs(input, {
            'name': "Administrator"
          });
          return Test.Username(null, {});
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.UseConsoleHelper">
      <inputType>void</inputType>
      <outputType>void</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          Console.info("Informations");
          Console.warn("Warnings");
          Console.error("Errors");
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.SimpleScript">
      <inputType>void</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <param name="document" type="string"/>
      <script><![CDATA[
        function run(input, params) {
            var root = Repository.GetDocument(null, {
                "value" : "/"
            });
            return root;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.MVELResolver">
      <inputType>void</inputType>
      <outputType>void</outputType>
      <category>Scripting</category>
      <param name="mvel" type="string"/>
      <script><![CDATA[
        function run(input, params) {
            return params.mvel;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestSet">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          input['dc:title'] = 'TitleFromTest';
          input['dc:created'] = new Date(0);
          return input;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestSetPropertyValue">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          input.setPropertyValue('dc:title', 'TitleFromTest');
          input.setPropertyValue('dc:created', new Date(0));
          return input;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestSetArray">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          input['dc:subjects'] = [ 'sciences', 'society' ];
          return input;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestSetPropertyValueArray">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          input.setPropertyValue('dc:subjects', [ 'sciences', 'society' ]);
          return input;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.LogScript">
      <inputType>void</inputType>
      <outputType>void</outputType>
      <category>javascript</category>
      <description></description>
      <script><![CDATA[
        function run(input, params) {
          Log(input, {'level': 'INFO','message': 'Success!'});
          return input;
         }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestBlobListInputToAnotherOperation">
      <inputType>void</inputType>
      <outputType>Blobs</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/docWithBlobs"
            });

            var blobs = Document.GetBlobs(root, {});

            Context.PushBlobList(blobs, {});

            return blobs;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestBlobArrayInputToAnotherOperation">
      <inputType>void</inputType>
      <outputType>void</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/docWithBlobs"
            });

            var blobList = Document.GetBlobs(root, {});
            var blobs = [];
            blobs.push(blobList.get(0));
            blobs.push(blobList.get(1));

            Context.PushBlobList(blobs, {});

            return blobs;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestArrayObjectProperties">
      <inputType>void</inputType>
      <outputType>void</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          var propertyName = "dc:subjects";
          var props = {};
          var subjects = [];
          subjects.push("sciences");
          subjects.push("society");
          props[propertyName] = subjects;
          Document.Update(input, { 'properties': props, 'save': true });
          return input;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestParams">
      <inputType>void</inputType>
      <outputType>void</outputType>
      <param name="today" type="Object"/>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          return params;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestInputAdaptedAsDocument">
      <inputType>document</inputType>
      <outputType>document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          if (typeof input === 'string') {
            // should be a document
            throw new Error('input should be a Document');
          }
          return input;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestInputAdaptedAsDocuments">
      <inputType>documents</inputType>
      <outputType>documents</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          if (typeof input === 'string') {
            // should be an array of documents
            throw new Error('input should be a Document');
          }
          if (input.length !== 2) {
            throw new Error('input should be an array of 2 documents');
          }
          return input;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestInputAdaptedAsBlobs">
      <inputType>blobs</inputType>
      <outputType>blobs</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          return input;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestUpdateProperties">
      <inputType>document</inputType>
      <outputType>document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          var properties = {
            "dc:description": "foo",
            "dc:source": "bar"
          };

          var doc = Document.Update(input, {
            'properties': properties,
            'save': true
          });
          return doc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestUpdateComplexProperties">
      <inputType>document</inputType>
      <outputType>document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          var properties = {
            "list:complexItem": {
              "name": "foo",
              "description": "bar"
            }
          };

          var doc = Document.Update(input, {
            'properties': properties,
            'save': true
          });
          return doc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestPropertiesAccessOnDocuments">
      <inputType>documents</inputType>
      <outputType>documents</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          var creator = input[0]['dc:creator'];
          if (creator !== 'system') {
            throw new Error("input[0]['dc:creator'] should return system");
          }
          creator = input[1].getPropertyValue('dc:creator');
          if (creator !== 'system') {
            throw new Error("input[1].getPropertyValue('dc:creator') should return system");
          }
          return input;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestDocumentProperty">
      <inputType>document</inputType>
      <outputType>document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          var docId = input['df:documentId'];
          if (!docId.startsWith('test:')) {
            throw new Error(docId + " should starts with the repository name 'test:'");
          }
          var docPath = input['df:documentPath'];
          if (!docPath.startsWith('test:')) {
            throw new Error(docPath + " should starts with the repository name 'test:'");
          }
          var doc1 = Repository.GetDocument(null, { value: docId });
          var doc2 = Repository.GetDocument(null, { value: docPath });
          return [doc1, doc2];
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestDocumentListProperty">
      <inputType>document</inputType>
      <outputType>document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
          var docs = [];
          var docIds = input['df:documentIds'];
          docIds.forEach(function(id) {
            if (!id.startsWith('test:')) {
              throw new Error(id + " should starts with the repository name 'test:'");
            }
            docs.push(Repository.GetDocument(null, { value: id }));
          });
          var docPaths = input['df:documentPaths'];
          docPaths.forEach(function(path) {
            if (!path.startsWith('test:')) {
              throw new Error(path + " should starts with the repository name 'test:'");
            }
            docs.push(Repository.GetDocument(null, { value: path }));
          });
          return docs;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestImport">
      <inputType>void</inputType>
      <outputType>blob</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {
            var uuid = java.util.UUID.randomUUID().toString();
            return org.nuxeo.ecm.core.api.Blobs.createJSONBlob("{'uuid': \"" + uuid + "\"}");
        }
      ]]></script>
    </scriptedOperation>

  </extension>

  <extension point="chains"
    target="org.nuxeo.ecm.core.operation.OperationServiceComponent">

    <chain id="Scripting.ChainedHello">
      <operation id="Scripting.HelloWorld">
        <param type="string" name="lang">fr</param>
      </operation>
      <operation id="Scripting.HelloWorld">
        <param type="string" name="lang">en</param>
      </operation>
    </chain>

    <chain id="my-chain-with-dashes">
      <operation id="Test.Username">
      </operation>
    </chain>

    <chain id="my-chain-with-loginasctx">
      <operation id="Auth.LoginAs">
        <param type="string" name="name">Administrator</param>
      </operation>
      <operation id="Scripting.TestLoginAsContext">
      </operation>
    </chain>

    <chain id="my-chain-with-loginasop">
      <operation id="Scripting.TestLoginAsOperation">
      </operation>
      <operation id="Test.Username">
      </operation>
    </chain>

    <chain id="my-chain-with-mvelresolver">
      <operation id="Context.SetVar">
        <param type="string" name="name">myvar</param>
        <param type="string" name="value">Bar</param>
      </operation>
      <operation id="Scripting.MVELResolver">
        <param type="string" name="mvel">expr:Foo @{myvar}</param>
      </operation>
    </chain>

    <chain id="Scripting.ChainWithScripting">
      <operation id="Context.FetchDocument"/>
      <operation id="Scripting.LogScript"/>
      <operation id="Log">
        <param type="string" name="level">info</param>
        <param type="string" name="message">Success!</param>
      </operation>
    </chain>

  </extension>

</component>
